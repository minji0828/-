package com.ohgiraffers.b_variable.chap01;

public class application01 {
    public static void main(String[] args) {

        /*
         *리터럴(literal)이란?
         * - 소스 코드에 직접 작성된값 자체를 의미한다.
         * - 예를 들어 int a = 100; 에서 100은 "정수 리터럴"이고
         * string str = "안녕하세요"; 에서 "안녕하세요"는 문자열 리터럴이다.
         * -리터럴은 변수에 저장되기 전의 순수한 값을 의미한다.
         * */
        int example = 10;

        /*
        * 변수
        * 변수는 데이터를 저장하기 위한 메모리 공간을 참조하는 이름이다.
        * 즉. 프로그램이 데이터를 다룰 때 메모리 어딘가에 값을 저장하고
        * 그 위치를 이름으로 쉽게 불러오는 역할을 한다.
        * 예를 들어 int number = 10 이라는 코드가 존재한다면
        * 여기서 변수명은 number가 되는 것이다.
        * number은 메모리의 주소와 매칭되어 0x001을 사람이 표현하기 쉽게 number라고 표현하는 것이다.
        */

        // 변수의 필요성
        // int 0x001 = 10;
        // int 0x002 = 20;

        // 그러나 아래와 같이 변수를 사람이 기억하기 쉬운 이름을 사용하면
        // 변수를 사용하는 것에 부담이 줄어들 것이ㅏ.
        // 변수 선언 및 초기화
        int number = 10;
        int number = 20;

        System.out.println("number = " + number);
        System.out.println("number = " + number2);


        /*
        * 변수의 활용
        * 변수를 사용하면 같은 데이터를 여러 번 활용할 수 있다.
        * 또한 가독서이 좋아지고 유지보수가 편리해진다.
        *
         */
        int width = 10;
        int height = 20;
        int area = (width * height);
        System.out.println("area = " + area);

        /*
         * 데이터 타입
         * 변수를 사용하기 위해서는 데이터 타입이라는 것이 필요하다.
         * 이러한 데이터 타입은 변수에 저장할 데이터의 종류와 크기에 맞는 메모리 공간을 찾고, 그곳에 값을 정의하기 위해 사용된다.
         * 이는 변수에 저장할 데이터의 특성을 명확히 규정함으로써 프로그램이 데이터를 올바르게 처리할 수 있도록 보장한다.
         * 예를 들어, 숫자 데이터를 저장하려면 `int`나 `double`과 같은 타입을 지정하고, 문자열을 저장하려면 `String` 타입을 사용한다.
         *
         * 일상에서 생각해보자. 만약 라면을 담으려는데 밥그릇만 있다면 라면이 넘치거나 제대로 담기지 않을 것이다.
         * 반대로 세숫대야처럼 너무 큰 그릇을 사용하면 불필요하게 공간이 낭비된다. 이렇듯 데이터 타입은 너무 크거나 작지 않고,
         * 상황에 따라 적절한 크기를 선택해야 하는 중요한 역할을 한다
         *
         * 데이터 타입이 필요한 이유는 이뿐만이 아니다. 데이터 타입은 프로그램이 라면을 끓이기 전에 그릇의 크기를 미리 확인하는
         * 것처럼, 데이터 처리 과정에서 발생할 수 있는 문제를 사전에 방지한다. 예를 들어, `int` 타입 변수에 문자열을 넣으려 하면
         * 컴파일러가 오류를 발생시켜 잘못된 사용을 막아준다. 또한, 데이터 타입은 연산의 가능 여부를 결정하며, 예를 들어 `int`는
         * 덧셈이 가능하지만 `boolean`은 논리 연산만 허용된다. 이는 코드의 안정성뿐 아니라 가독성과 유지보수성까지 높여주는 핵심 요소다.
         * */

        // 숫자형
        byte bNum = 10;
        short sNum = 10;
        int iNum = 10;
        long lNum = 1000000000000L;

        // 실수형
        float fNum = 10.5f;
        double dNum = 10.5;

        // 참과 거짓을 저장하는 데이터 타입
        boolean bool = true;

        // 문자를 저장하는 데이터 타입
        char char1 = 'a';


        /* 이해하기 */
        // 정수를 담는 그릇에 실수를 넣어서 오류가 발생.
        // int num = 10.9;
    }
}
